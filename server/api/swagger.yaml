"openapi": "3.0.0"
"info":
  "title": "Clothes-freeman API Documentation"
  "description": "API documentation for the Express application."
  "version": "1.0.0"
"servers":
  - "url": "http://localhost:3000/api/v1"
    "description": "Local server"
"tags":
  - "name": "auth"
    "description": "Authenticantion user"
    "externalDocs":
      "description": "Find out more"
      "url": "http://localhost:3000/api/v1"
  - "name": "product"
    "description": "Access to products"
    "externalDocs":
      "description": "Find out more about our store"
      "url": "http://localhost:3000/api/v1"
  - "name": "orders"
    "description": "Access to orders"
    "externalDocs":
      "description": "Find out more about our store"
      "url": "http://localhost:3000/api/v1"
  - "name": "users"
    "description": "Access to users"
    "externalDocs":
      "description": "Find out more about our store"
      "url": "http://localhost:3000/api/v1"
  - "name": "country"
    "description": "Access to country"
    "externalDocs":
      "description": "Find out more about our store"
      "url": "http://localhost:3000/api/v1"

"paths":
  "/auth/register":
    "post":
      "tags":
        - "auth"
      "summary": "Register a new user"
      "requestBody":
        "description": "User registration details"
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "username":
                  "type": "string"
                "email":
                  "type": "string"
                "password":
                  "type": "string"
                "password_confirmation":
                  "type": "string"
              "required":
                - "username"
                - "email"
                - "password"
                - "password_confirmation"
      "responses":
        "201":
          "description": "User registered successfully"
        "400":
          "description": "Bad request"
        "500":
          "description": "Internal server error"
  "/auth/verify-email":
    "post":
      "tags":
        - "auth"
      "summary": "Verify user email"
      "requestBody":
        "description": "Email verification details"
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "email":
                  "type": "string"
                "otp":
                  "type": "string"
              "required":
                - "email"
                - "otp"
      "responses":
        "200":
          "description": "Email verified successfully"
        "400":
          "description": "Bad request"
        "404":
          "description": "Email not found"
        "500":
          "description": "Internal server error"
  "/auth/login":
    "post":
      "tags":
        - "auth"
      "summary": "Log in a user"
      "requestBody":
        "description": "User login details"
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "email":
                  "type": "string"
                "password":
                  "type": "string"
              "required":
                - "email"
                - "password"
      "responses":
        "200":
          "description": "Login successful"
        "400":
          "description": "Bad request"
        "401":
          "description": "Unauthorized"
        "500":
          "description": "Internal server error"
  "/auth/reset-password-link":
    "post":
      "tags":
        - "auth"
      "summary": "Send password reset email"
      "requestBody":
        "description": "Email for password reset request"
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "email":
                  "type": "string"
              "required":
                - "email"
      "responses":
        "200":
          "description": "Password reset link sent successfully"
        "400":
          "description": "Bad request"
        "404":
          "description": "Email not found"
        "500":
          "description": "Internal server error"
  "/auth/reset-password/{id}/{token}":
    "post":
      "tags":
        - "auth"
      "summary": "Reset user password"
      "parameters":
        - "in": "path"
          "name": "id"
          "required": true
          "schema":
            "type": "string"
        - "in": "path"
          "name": "token"
          "required": true
          "schema":
            "type": "string"
      "requestBody":
        "description": "New password details"
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "password":
                  "type": "string"
                "password_confirmation":
                  "type": "string"
              "required":
                - "password"
                - "password_confirmation"
      "responses":
        "200":
          "description": "Password reset successfully"
        "400":
          "description": "Bad request"
        "404":
          "description": "User not found"
        "500":
          "description": "Internal server error"
  "/auth/logout":
    "post":
      "tags":
        - "auth"
      "summary": "Log out a user"
      "responses":
        "200":
          "description": "Logout successful"
        "500":
          "description": "Internal server error"
  "/auth/me":
    "get":
      "tags":
        - "auth"
      "summary": "Get user profile"
      "security":
        - "bearerAuth": []
      "responses":
        "200":
          "description": "User profile fetched successfully"
        "401":
          "description": "Unauthorized"
        "500":
          "description": "Internal server error"
  "/auth/change-password":
    "post":
      "tags":
        - "auth"
      "summary": "Change user password"
      "security":
        - "bearerAuth": []
      "requestBody":
        "description": "New password details"
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "password":
                  "type": "string"
                "password_confirmation":
                  "type": "string"
              "required":
                - "password"
                - "password_confirmation"
      "responses":
        "200":
          "description": "Password changed successfully"
        "400":
          "description": "Bad request"
        "500":
          "description": "Internal server error"

  "/products":
    "get":
      "tags":
        - "product"
      "summary": "Get all products"
      "description": "Fetch all products or fetch products with pagination."
      "parameters":
        - "in": "query"
          "name": "page"
          "schema":
            "type": "integer"
          "required": false
          "description": "Page number for pagination"
      "responses":
        "200":
          "description": "A list of products"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "products":
                    "type": "array"
                    "items":
                      "type": "object"
                      "properties":
                        "id":
                          "type": "string"
                        "name":
                          "type": "string"
                        "description":
                          "type": "string"
                        "category":
                          "type": "string"
                        "subCategory":
                          "type": "array"
                          "items":
                            "type": "object"
                        "productImg":
                          "type": "array"
                          "items":
                            "type": "string"
                        "price":
                          "type": "number"
                        "stock":
                          "type": "integer"
                  "totalPages":
                    "type": "integer"
        "500":
          "description": "Internal server error"
  "/products/{category}":
    "get":
      "tags":
        - "product"
      "summary": "Get products by category"
      "description": "Fetch products by category with pagination."
      "parameters":
        - "in": "path"
          "name": "category"
          "schema":
            "type": "string"
          "required": true
          "description": "Category name"
        - "in": "query"
          "name": "page"
          "schema":
            "type": "integer"
          "required": false
          "description": "Page number for pagination"
      "responses":
        "200":
          "description": "A list of products by category"
          "content":
            "application/json":
              "schema":
                "type": "array"
                "items":
                  "type": "object"
                  "properties":
                    "id":
                      "type": "string"
                    "name":
                      "type": "string"
                    "description":
                      "type": "string"
                    "category":
                      "type": "string"
                    "subCategory":
                      "type": "array"
                      "items":
                        "type": "object"
                    "productImg":
                      "type": "array"
                      "items":
                        "type": "string"
                    "price":
                      "type": "number"
                    "stock":
                      "type": "integer"
        "400":
          "description": "No data found"
        "500":
          "description": "Internal server error"
  "/create-product":
    "post":
      "tags":
        - "product"
      "summary": "Create a new product"
      "description": "Create a new product in the database."
      "requestBody":
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "name":
                  "type": "string"
                "description":
                  "type": "string"
                "category":
                  "type": "string"
                "subCategory":
                  "type": "string"
                  "description": "JSON string representing the subcategories"
      "responses":
        "200":
          "description": "Product created successfully"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
        "401":
          "description": "Invalid data"
        "500":
          "description": "Internal server error"
  "/update-product":
    "patch":
      "tags":
        - "product"
      "summary": "Update a product"
      "description": "Update an existing product."
      "requestBody":
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "id":
                  "type": "string"
                "name":
                  "type": "string"
                "description":
                  "type": "string"
                "category":
                  "type": "string"
      "responses":
        "200":
          "description": "Product updated successfully"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
        "401":
          "description": "Invalid data"
        "500":
          "description": "Internal server error"
  "/product/{productId}":
    "delete":
      "tags":
        - "product"
      "summary": "Delete a product"
      "description": "Deletes a product by its productId. It also deletes images from Cloudinary and the related folder, and then removes the product from the MongoDB database."
      "parameters":
        - "name": "productId"
          "in": "path"
          "required": true
          "schema":
            "type": "string"
          "description": "ID of the product to delete"
      "responses":
        "200":
          "description": "Product successfully deleted"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Product name has been successfully deleted"
        "400":
          "description": "Missing productId or unable to delete images and folder"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Missing data or images cannot be deleted"
        "404":
          "description": "Product not found"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Product does not exist"
        "500":
          "description": "Server error while deleting product"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Server error"
  "/variants/{itemId}":
    "get":
      "tags":
        - "product"
      "summary": "Get a variants by itemId based in Product"
      "description": "Fetch a single product by its ID."
      "parameters":
        - "in": "path"
          "name": "itemId"
          "schema":
            "type": "string"
          "required": true
          "description": "Product ID"
      "responses":
        "200":
          "description": "A single product"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "id":
                    "type": "string"
                  "name":
                    "type": "string"
                  "description":
                    "type": "string"
                  "category":
                    "type": "string"
                  "subCategory":
                    "type": "array"
                    "items":
                      "type": "object"
                  "productImg":
                    "type": "array"
                    "items":
                      "type": "string"
                  "price":
                    "type": "number"
                  "stock":
                    "type": "integer"
        "400":
          "description": "No data found"
        "500":
          "description": "Internal server error"
  "/product/traits":
    "get":
      "tags":
        - "product"
      "summary": "Get products with filters"
      "description": "Fetch products based on various filters like tag, color, size, and category."
      "parameters":
        - "in": "query"
          "name": "tag"
          "schema":
            "type": "string"
          "required": false
          "description": "Product tag"
        - "in": "query"
          "name": "color"
          "schema":
            "type": "string"
          "required": false
          "description": "Product color"
        - "in": "query"
          "name": "size"
          "schema":
            "type": "string"
          "required": false
          "description": "Product size"
        - "in": "query"
          "name": "page"
          "schema":
            "type": "integer"
          "required": false
          "description": "Page number for pagination"
      "responses":
        "200":
          "description": "Filtered products list"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "products":
                    "type": "array"
                    "items":
                      "type": "object"
                      "properties":
                        "id":
                          "type": "string"
                        "name":
                          "type": "string"
                        "description":
                          "type": "string"
                        "category":
                          "type": "string"
                        "subCategory":
                          "type": "array"
                          "items":
                            "type": "object"
                        "productImg":
                          "type": "array"
                          "items":
                            "type": "string"
                        "price":
                          "type": "number"
                        "stock":
                          "type": "integer"
                  "totalPages":
                    "type": "integer"
        "404":
          "description": "No products found"
        "500":
          "description": "Internal server error"
  "/product/search/{key}":
    "get":
      "tags":
        - "product"
      "summary": "Search for products"
      "description": "Search for products by a key."
      "parameters":
        - "in": "path"
          "name": "key"
          "schema":
            "type": "string"
          "required": true
          "description": "Search key"
      "responses":
        "200":
          "description": "Search results"
          "content":
            "application/json":
              "schema":
                "type": "array"
                "items":
                  "type": "object"
                  "properties":
                    "id":
                      "type": "string"
                    "name":
                      "type": "string"
                    "description":
                      "type": "string"
                    "category":
                      "type": "string"
                    "subCategory":
                      "type": "array"
                      "items":
                        "type": "object"
                    "productImg":
                      "type": "array"
                      "items":
                        "type": "string"
                    "price":
                      "type": "number"
                    "stock":
                      "type": "integer"
        "404":
          "description": "No products found"
        "500":
          "description": "Internal server error"

  /order/all-order:
    get:
      summary: "Retrieve all orders"
      tags:
        - "orders"
      responses:
        "200":
          description: "List of orders"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "610b1d7f2f8fb814b56fa183"
                    billingAddress:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "Nguyen Van A"
                        phone:
                          type: string
                          example: "0901234567"
                        district:
                          type: string
                          example: "District 1"
                        province:
                          type: string
                          example: "Ho Chi Minh"
                        address:
                          type: string
                          example: "123 Le Loi"
                    userId:
                      type: string
                      example: "60f8b5b35b9bfa0015b1a89d"
                    items:
                      type: array
                      items:
                        type: object
                    paymentMethod:
                      type: string
                      example: "COD"
                    shippingPrice:
                      type: number
                      example: 50000
                    note:
                      type: string
                      example: "Handle with care"
                    itemsPrice:
                      type: number
                      example: 450000
                    totalPrice:
                      type: number
                      example: 500000
                    totalQuantity:
                      type: integer
                      example: 3
                    deliveryStatus:
                      type: string
                      example: "In delivery"
        "401":
          description: "No data available"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No data available"
  /order/create-order:
    post:
      summary: "Create a new order"
      tags:
        - "orders"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Nguyen Van A"
                phone:
                  type: string
                  example: "0901234567"
                district:
                  type: string
                  example: "District 1"
                province:
                  type: string
                  example: "Ho Chi Minh"
                address:
                  type: string
                  example: "123 Le Loi"
                cart:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                        example: "610b1d7f2f8fb814b56fa183"
                      quantity:
                        type: integer
                        example: 2
                note:
                  type: string
                  example: "Deliver in the morning"
                totalPrice:
                  type: number
                  example: 500000
                itemsPrice:
                  type: number
                  example: 450000
                shippingPrice:
                  type: number
                  example: 50000
                totalQuantity:
                  type: integer
                  example: 3
                paymentMethod:
                  type: string
                  example: "COD"
                userId:
                  type: string
                  example: "60f8b5b35b9bfa0015b1a89d"
      responses:
        "200":
          description: "Order created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "/checkout/success"
        "400":
          description: "Unable to create order"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unable to create order"
        "500":
          description: "Server error while creating order"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while creating the order"
  /order/{orderId}:
    get:
      tags:
        - orders
      summary: "Get order details"
      description: "Fetches the details of an order by its orderId."
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: "ID of the order to retrieve"
      responses:
        "200":
          description: "Order details retrieved successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "610b1d7f2f8fb814b56fa183"
                  billingAddress:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Nguyen Van A"
                      phone:
                        type: string
                        example: "0901234567"
                      district:
                        type: string
                        example: "District 1"
                      province:
                        type: string
                        example: "Ho Chi Minh"
                      address:
                        type: string
                        example: "123 Le Loi"
                  userId:
                    type: string
                    example: "60f8b5b35b9bfa0015b1a89d"
                  items:
                    type: array
                    items:
                      type: object
                  paymentMethod:
                    type: string
                    example: "COD"
                  shippingPrice:
                    type: number
                    example: 50000
                  note:
                    type: string
                    example: "Handle with care"
                  itemsPrice:
                    type: number
                    example: 450000
                  totalPrice:
                    type: number
                    example: 500000
                  totalQuantity:
                    type: integer
                    example: 3
                  deliveryStatus:
                    type: string
                    example: "In delivery"
        "400":
          description: "Missing orderId in the request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing orderId in the request"
        "404":
          description: "Order not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order does not exist"
        "500":
          description: "Server error while fetching the order"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while fetching the order"
  /order/update-order:
    put:
      summary: "Update an order"
      tags:
        - "orders"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  example: "610b1d7f2f8fb814b56fa183"
                deliveryStatus:
                  type: string
                  example: "In delivery"
                note:
                  type: string
                  example: "Handle with care"
                shippingPrice:
                  type: number
                  example: 55000
                totalPrice:
                  type: number
                  example: 555000
      responses:
        "200":
          description: "Order updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order updated successfully"
                  order:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "610b1d7f2f8fb814b56fa183"
                      billingAddress:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Nguyen Van A"
                          phone:
                            type: string
                            example: "0901234567"
                          district:
                            type: string
                            example: "District 1"
                          province:
                            type: string
                            example: "Ho Chi Minh"
                          address:
                            type: string
                            example: "123 Le Loi"
                      userId:
                        type: string
                        example: "60f8b5b35b9bfa0015b1a89d"
                      items:
                        type: array
                        items:
                          type: object
                      paymentMethod:
                        type: string
                        example: "COD"
                      shippingPrice:
                        type: number
                        example: 50000
                      note:
                        type: string
                        example: "Handle with care"
                      itemsPrice:
                        type: number
                        example: 450000
                      totalPrice:
                        type: number
                        example: 500000
                      totalQuantity:
                        type: integer
                        example: 3
                      deliveryStatus:
                        type: string
                        example: "In delivery"
        "400":
          description: "Missing orderId"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing orderId"
        "404":
          description: "Order not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  "/user":
    "get":
      "summary": "Lấy danh sách người dùng"
      "tags":
        - "users"
      "responses":
        "200":
          "description": "Danh sách người dùng"
          "content":
            "application/json":
              "schema":
                "type": "array"
                "items":
                  "type": "object"
                  "properties":
                    "_id":
                      "type": "string"
                      "example": "60f8b5b35b9bfa0015b1a89d"
                    "username":
                      "type": "string"
                      "example": "user123"
                    "email":
                      "type": "string"
                      "example": "user@example.com"
                    "roles":
                      "type": "array"
                      "items":
                        "type": "string"
                        "example": "user"
                    "createdAt":
                      "type": "string"
                      "format": "date-time"
                      "example": "2024-09-01T12:00:00Z"
                    "updatedAt":
                      "type": "string"
                      "format": "date-time"
                      "example": "2024-09-01T12:00:00Z"
        "400":
          "description": "Không tìm thấy dữ liệu"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Không tìm thấy dữ liệu"
    "put":
      "summary": "Cập nhật vai trò người dùng"
      "tags":
        - "users"
      "requestBody":
        "required": true
        "content":
          "application/json":
            "schema":
              "type": "object"
              "properties":
                "userId":
                  "type": "string"
                  "example": "60f8b5b35b9bfa0015b1a89d"
                "roles":
                  "type": "array"
                  "items":
                    "type": "string"
                    "example": "admin"
      "responses":
        "200":
          "description": "Cập nhật vai trò thành công"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Username user123 với Id 60f8b5b35b9bfa0015b1a89d đã cập nhật vai trò"
        "400":
          "description": "Thiếu UserId hoặc người dùng không tồn tại"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Thiếu UserId"
        "500":
          "description": "Lỗi máy chủ"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Lỗi máy chủ"
                  "error":
                    "type": "string"
                    "example": "Error message details"
  /user/{userId}:
    delete:
      tags:
        - users
      summary: "Delete a user"
      description: "Deletes a user by their userId."
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "ID of the user to delete"
      responses:
        "200":
          description: "User successfully deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username john_doe with Id 1234567890 has been deleted"
        "400":
          description: "Bad request, userId is required or user not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "UserId is required or User not found"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error occurred while deleting the user"

  "/country/provinces":
    "get":
      "summary": "Lấy danh sách tất cả các tỉnh/thành phố"
      "tags":
        - "country"
      "responses":
        "200":
          "description": "Thành công - Trả về danh sách các tỉnh/thành phố"
          "content":
            "application/json":
              "schema":
                "type": "array"
                "items":
                  "type": "object"
                  "properties":
                    "province_id":
                      "type": "string"
                      "example": "01"
                    "province_name":
                      "type": "string"
                      "example": "Hà Nội"
        "500":
          "description": "Lỗi máy chủ khi lấy danh sách tỉnh/thành phố"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Đã xảy ra lỗi khi lấy danh sách tỉnh/thành phố"
  "/country/districts/{provinceId}":
    "get":
      "summary": "Lấy danh sách quận/huyện theo mã tỉnh/thành phố"
      "tags":
        - "country"
      "parameters":
        - "in": "path"
          "name": "provinceId"
          "schema":
            "type": "string"
          "required": true
          "description": "Mã tỉnh/thành phố"
          "example": "01"
      "responses":
        "200":
          "description": "Thành công - Trả về danh sách các quận/huyện của tỉnh/thành phố"
          "content":
            "application/json":
              "schema":
                "type": "array"
                "items":
                  "type": "object"
                  "properties":
                    "district_id":
                      "type": "string"
                      "example": "001"
                    "district_name":
                      "type": "string"
                      "example": "Quận Ba Đình"
        "400":
          "description": "Yêu cầu không hợp lệ - Mã tỉnh/thành phố không tồn tại"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Mã tỉnh/thành phố không hợp lệ"
        "500":
          "description": "Lỗi máy chủ khi lấy danh sách quận/huyện"
          "content":
            "application/json":
              "schema":
                "type": "object"
                "properties":
                  "message":
                    "type": "string"
                    "example": "Đã xảy ra lỗi khi lấy danh sách quận/huyện"

"components":
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  "schemas":
    "Product":
      "type": "object"
      "properties":
        "id":
          "type": "string"
        "name":
          "type": "string"
        "description":
          "type": "string"
        "category":
          "type": "string"
        "subCategory":
          "type": "array"
          "items":
            "type": "object"
        "productImg":
          "type": "array"
          "items":
            "type": "string"
        "price":
          "type": "number"
        "stock":
          "type": "integer"
    "ProductInput":
      "type": "object"
      "properties":
        "name":
          "type": "string"
        "description":
          "type": "string"
        "category":
          "type": "string"
        "subCategory":
          "type": "string"
          "description": "JSON string representing the subcategories"
    "ProductUpdate":
      "type": "object"
      "properties":
        "id":
          "type": "string"
        "name":
          "type": "string"
        "description":
          "type": "string"
        "category":
          "type": "string"
    "Order":
      "type": "object"
      "properties":
        "_id":
          "type": "string"
          "example": "610b1d7f2f8fb814b56fa183"
        "billingAddress":
          "type": "object"
          "properties":
            "name":
              "type": "string"
              "example": "Nguyen Van A"
            "phone":
              "type": "string"
              "example": "0901234567"
            "district":
              "type": "string"
              "example": "Quan 1"
            "province":
              "type": "string"
              "example": "Ho Chi Minh"
            "address":
              "type": "string"
              "example": "123 Le Loi"
        "userId":
          "type": "string"
          "example": "60f8b5b35b9bfa0015b1a89d"
        "items":
          "type": "array"
          "items":
            "type": "object"
        "paymentMethod":
          "type": "string"
          "example": "COD"
        "shippingPrice":
          "type": "number"
          "example": 50000
        "note":
          "type": "string"
          "example": "Giao hàng cẩn thận"
        "itemsPrice":
          "type": "number"
          "example": 450000
        "totalPrice":
          "type": "number"
          "example": 500000
        "totalQuantity":
          "type": "integer"
          "example": 3
        "deliveryStatus":
          "type": "string"
          "example": "Đang giao"
    "User":
      "type": "object"
      "properties":
        "_id":
          "type": "string"
          "example": "60f8b5b35b9bfa0015b1a89d"
        "username":
          "type": "string"
          "example": "user123"
        "email":
          "type": "string"
          "example": "user@example.com"
        "roles":
          "type": "array"
          "items":
            "type": "string"
            "example": "user"
        "createdAt":
          "type": "string"
          "format": "date-time"
          "example": "2024-09-01T12:00:00Z"
        "updatedAt":
          "type": "string"
          "format": "date-time"
          "example": "2024-09-01T12:00:00Z"
    "Province":
      "type": "object"
      "properties":
        "province_id":
          "type": "string"
          "example": "01"
        "province_name":
          "type": "string"
          "example": "Hà Nội"
    "District":
      "type": "object"
      "properties":
        "district_id":
          "type": "string"
          "example": "001"
        "district_name":
          "type": "string"
          "example": "Quận Ba Đình"
